@using System.Text
@model ApplicationVM
@{
    ViewData["Title"] = "Онлайн регистрация";
}

<h3 align="center" class="s-header">Электронная регистрация</h3>
<form method="post" class="application">
    <div class="stage-area invis" id="page-0">
        <div class="container banner info">
            <p>
                Chocolate jelly candy biscuit bonbon carrot cake. Sweet roll jelly beans caramels brownie sesame
                snaps lollipop. Cookie chocolate bar gingerbread chocolate cheesecake chupa chups gummi bears.
                Toffee chocolate jelly beans marshmallow candy canes dragée donut. Danish halvah jelly-o bonbon.
                Tootsie roll lollipop caramels brownie brownie. Topping tiramisu ice cream biscuit gingerbread
                tiramisu caramels. Gummi bears marshmallow brownie toffee oat cake. Caramels topping jujubes jujubes
                oat cake lollipop sugar plum liquorice. Candy pie jujubes. Wafer powder bonbon danish cookie powder.
                Gummi bears gummies dragée pudding fruitcake oat cake danish candy donut. Toffee tootsie roll
                croissant tart soufflé dragée gummies.
            </p>
            <p>
                Кому доступна?
            </p>
            <p>
                Как происходит процес?
            </p>
            <p>
                Chocolate jelly candy biscuit bonbon carrot cake. Sweet roll jelly beans caramels brownie sesame
                snaps lollipop. Cookie chocolate bar gingerbread chocolate cheesecake chupa chups gummi bears.
                Toffee chocolate jelly beans marshmallow candy canes dragée donut. Danish halvah jelly-o bonbon.
                Tootsie roll lollipop caramels brownie brownie. Topping tiramisu ice cream biscuit gingerbread
                tiramisu caramels. Gummi bears marshmallow brownie toffee oat cake. Caramels topping jujubes jujubes
                oat cake lollipop sugar plum liquorice. Candy pie jujubes. Wafer powder bonbon danish cookie powder.
                Gummi bears gummies dragée pudding fruitcake oat cake danish candy donut. Toffee tootsie roll
                croissant tart soufflé dragée gummies.
            </p>
            <p>
                Нажимая кнопку "Приступить к регистрации" вы <strong>соглашаетесь</strong> с <a href="/"
                                                                                                class="link">условиями обработки персональных данных</a>
            </p>

        </div>
        <div align="center">
            <a class="btn btn-blue next">Приступить к регистрации</a>

        </div>
    </div>

    <div class="stage-area invis" id="page-1">
        <div class="container banner holder">

            <input class="styled-input required name" onkeydown="removeWarn(this)" id="lastName" name="lastName" type="text" placeholder="Фамилия">
            <input class="styled-input required name" onkeydown="removeWarn(this)" id="firstName" name="firstName" type="text" placeholder="Имя">
            <input class="styled-input required name" onkeydown="removeWarn(this)" id="middleName" name="middleName" type="text" placeholder="Отчество">
            <br />

            <h4 align="center" class="pretty-h4">Желаемые направления подготовки</h4>

            <div>
                <div id="select-area">

                </div>
                <div class="button-wrap">
                    <button id="add-select" type="button" onclick="createSelect();" class="plus-button plus-button--small"></button>
                    <button id="clear" class="btn btn-grey clear-button" type="button" onclick="clearSelects()">Очистить</button>
                </div>
            </div>



        </div>
        <div align="center">
            <a class="btn btn-grey prev">Назад</a>
            <a class="btn btn-blue next">Далее</a>
        </div>
    </div>

    <div class="stage-area invis" id="page-2">
        <div class="container banner info">
            <p>
                Chocolate jelly candy biscuit bonbon carrot cake. Sweet roll jelly beans caramels brownie sesame
                snaps lollipop. Cookie chocolate bar gingerbread chocolate cheesecake chupa chups gummi bears.
                Toffee chocolate jelly beans marshmallow candy canes dragée donut. Danish halvah jelly-o bonbon.
                Tootsie roll lollipop caramels brownie brownie. Topping tiramisu ice cream biscuit gingerbread
                tiramisu caramels. Gummi bears marshmallow brownie toffee oat cake. Caramels topping jujubes jujubes
                oat cake lollipop sugar plum liquorice. Candy pie jujubes. Wafer powder bonbon danish cookie powder.
                Gummi bears gummies dragée pudding fruitcake oat cake danish candy donut. Toffee tootsie roll
                croissant tart soufflé dragée gummies.
            </p>
        </div>
        <div align="center">
            <a class="btn btn-grey prev">Назад</a>
            <input class="btn btn-blue" style="border: none;" type="submit" value="Зарегистрироваться">
        </div>
    </div>

    <div id="plans-field" hidden style="display:none;">
        <div></div>
    </div>

    <input id="rawFinTypes" name="rawFinTypes" hidden style="display:none;" />

    <div id="not-supported" class="container banner info invis">
        <h2>К сожалению, Ваш браузер не поддерживается по техническим причинам... Попробуйте использовать другой  :)</h2>
    </div>

</form>

@section Scripts{
    <script id="plans-data">
        //plans section
        var data = '@Html.Raw(Model.Base64Plans)';

        var plans = JSON.parse(data);

        var allPlans = [];

        JSON.parse(data)
        .forEach(function (inst) {
                inst.plans.forEach(function (p) {
                    allPlans.push(p);
                })
            })

    </script>
    <script>
        var selectedPlans = [];
        var uniqueCodes = [];
        var currentSource = [];
        var selectorsCount = 0;
        var isAvailableSelect;
        var addButton;
        var clearButton;

        var pages = {
            items: [],
            index: 0,
            direction: '',
            come: null,
            leave: null,
            next: function () {
                if (this.items.length - 1 < this.index + 1) return;

                this.direction = 'L'

                this.leave = this.items[this.index];
                this.come = this.items[this.index + 1];

                this.come.addEventListener('animationend', handleIn);

                this.leave.addEventListener('animationend', handleOut);

                this.leave.classList.add('out', 'animate', 'slideOutLeft');

                ++this.index;
            },
            prev: function () {
                if (this.index === 0) return;

                this.direction = 'R'

                this.leave = this.items[this.index];
                this.come = this.items[this.index - 1];

                this.come.addEventListener('animationend', handleIn);

                this.leave.addEventListener('animationend', handleOut);

                this.leave.classList.add('out', 'animate', 'slideOutRight');

                --this.index;
            }
        }

        window.onload = function () {
            
            var isIE = @Html.Raw("/*@cc_on!@*/false") || !!document.documentMode;
            var isEdge = !isIE && !!window.StyleMedia;

            if (isIE || isEdge) {
                document.getElementById('not-supported').classList.remove('invis')
            } else {
                document.getElementById('page-0').classList.remove('invis')
            }

            //init page slider
            var pagesNodes = document.querySelectorAll('.stage-area');
            for (var i = 0, e; e = pagesNodes[i]; ++i) pages.items.push(e);

            var nextBtns = document.querySelectorAll('.next');
            var prevBtns = document.querySelectorAll('.prev');

            for (var i = 0, e; e = nextBtns[i]; ++i) {
                e.addEventListener('click', onNext);
            }

            for (var i = 0, e; e = prevBtns[i]; ++i) {
                e.addEventListener('click', onPrev);
            }

            addButton = document.getElementById('add-select');
            clearButton = document.getElementById('clear');
        }

        function handleOut(event) {
            event.target.classList.add('invis');
            removeClasses(event.target);
            event.target.removeEventListener('animationend', handleOut);

            var animationStyle = pages.direction === 'L' ? "slideInRight" : "slideInLeft";

            pages.come.classList.add('in', 'animate', animationStyle);
            pages.come.classList.remove('invis');
        }

        function handleIn() {
            removeClasses(event.target);
            event.target.removeEventListener('animationend', handleIn);
        }

        function removeClasses(element) {
            element.classList.remove('in', 'out', 'animate', 'slideOutLeft', 'slideOutRight', 'slideInRight', 'slideInLeft');
        }

        function onNext() {
            handleNextPage(pages.index, function () {
                pages.next();
            });
        };

        function onPrev() {
            pages.prev();
        };

        function handleNextPage(index, onSuccess) {
            switch (index) {
                case 0:
                    filterSource();
                    clearSelects(true);

                    onSuccess();
                    break;
                case 1:

                    if (!validateNames() || !validatePlans()) {
                        break;
                    }
                    if (!validateFinTypes()) {
                        setTimeout(function () {
                            alert("Не установлены источники финансирования (Бюджет, Контракт)")
                        }, 100);
                        break;
                    }

                    onSuccess();
                    prepareForm();
                    break;
                case 2:

                    break;
                default:
                    onSuccess();
            }
        }

        function validateNames() {
            var validationStatus = true;

            var lastName = document.getElementById('lastName');
            var firstName = document.getElementById('firstName');
            var middleName = document.getElementById('middleName');

            lastName.value = lastName.value.trim();
            firstName.value = firstName.value.trim();
            middleName.value = middleName.value.trim();

            if (lastName.value.length === 0 || /[a-zA-Z0-9]/.test(lastName.value)) {
                lastName.classList.add('invalid-input');
                validationStatus = false;
            }

            if (firstName.value.length === 0 || /[a-zA-Z0-9]/.test(firstName.value)) {
                firstName.classList.add('invalid-input');
                validationStatus = false;
            }

            if (/[a-zA-Z0-9]/.test(middleName.value)) {
                middleName.classList.add('invalid-input');
                validationStatus = false;
            }

            return validationStatus;
        }

        function validatePlans() {
            if (Object.keys(selectedPlans).length === 0) {
                setTimeout(function () {
                    alert('Выберите желаемые направления подготовки');
                }, 100);
                return false;
            } else {
                return true;
            }
        }

        function validateFinTypes() {
            var checkboxes = document.getElementsByClassName('fin-type-cb');
            var cb, searchPattern;
            for (var i = 0; i < checkboxes.length; i++) {
                cb = checkboxes[i];
                if (cb.checked) continue;

                //find opposite fin type
                searchPattern = cb.id[0] === 'c' ? 'b' + cb.id.substring(1) : 'c' + cb.id.substring(1);

                var isSuccess = false;
                for (var j = 0; j < checkboxes.length; j++) {
                    if (checkboxes[j].checked && checkboxes[j].id === searchPattern) {
                        isSuccess = true;
                        break;
                    }
                }

                if (isSuccess) continue;

                return false;
            }

            return true;
        }

        function filterSource() {
            var selectedPlansId = Object.values(selectedPlans).map(function (p) {
                return p.id
            })

            //if all exams of plan are contained in selectedExams, plan remain
            var filteredPlans = plans.map(function (inst) {
                var newInst = {
                    name: inst.name
                };

                newInst.plans = inst.plans.filter(function (plan) {
                    if (selectedPlansId.includes(plan.id)) { //exclude plans that have been selected yet
                        return false;
                    }

                    if (uniqueCodes.length > 2 && !uniqueCodes.includes(plan.title.code)) { //if there are unselected plans with the same code as unique
                        return false;
                    }

                    return true;
                })

                return newInst.plans.length > 0 ? newInst : null;
            });

            filteredPlans = filteredPlans.filter(function (item) { //remove nulls
                return item;
            })

            currentSource = filteredPlans;
        }

        //plans logic ----
        function handleExamChange(checkbox) {
            if (checkbox.checked) {
                selectedExams.push(parseInt(checkbox.id, 10));//convert to number
            } else {
                selectedExams = selectedExams.filter(function (e) {
                    return e + '' != checkbox.id; //convert to string
                })
            }
        }

        function removeWarn(item) {
            item.classList.remove('invalid-input');
        }

        function fillSelect(s, source) {
            source.forEach(function (i) {
                var optGroup = document.createElement('optgroup');
                optGroup.label = i.name;

                i.plans.forEach(function (p) {
                    var option = document.createElement('option');
                    option.value = p.id;
                    option.innerHTML = p.title.code + " " + p.title.full;
                    optGroup.appendChild(option);
                });

                s.add(optGroup);

            })
        }

        function createSelect() {

            var source = currentSource;

            isAvailableSelect = true;
            var area = document.getElementById('select-area');

            var s = document.createElement('select');
            s.id = 'select-' + selectorsCount;

            s.addEventListener('change', function () {
                handleSelectChange(s.id, s.value)
                s.setAttribute('disabled', '');
                s.classList.remove('pointer');
                s.classList.add('selected');
            })

            s.classList.add('plans-select', 'smooth-appearing', 'invis-select', 'pointer');

            var opt = document.createElement('option');
            opt.innerHTML = "Выберите направление подготовки";
            opt.value = 0;
            opt.setAttribute('selected', '');
            opt.setAttribute('disabled', '');
            opt.setAttribute('hidden', '');
            s.add(opt);

            fillSelect(s, source);

            var finBox = document.createElement('div');
            finBox.id = "ftb" + selectorsCount;
            finBox.classList.add('fin-type-box', 'to-clear');

            area.appendChild(s);
            area.appendChild(finBox);

            selectorsCount++;

            setTimeout(function () { //чтобы анимация не обгоняла прикрепление
                s.classList.remove('invis-select');
                renderAddButton();
            }, 50)
        }

        function clearSelects(forse) {

            if (!forse && Object.keys(selectedPlans).length === 0) return;

            selectorsCount = 0;
            selectedPlans = [];
            uniqueCodes = [];
            isAvailableSelect = true;

            var selects = document.getElementsByClassName('plans-select');
            while (selects.length > 0) {
                selects[0].remove();
            }

            var toClear = document.getElementsByClassName('to-clear');
            while (toClear.length > 0) {
                toClear[0].remove();
            }

            addButton.classList.add('invis');
            clearButton.classList.add('invis');

            filterSource();

            createSelect(currentSource);
        }

        function handleSelectChange(selectorId, planId) {
            isAvailableSelect = false;
            var id = parseInt(planId, 10);

            //console.log(id);
            //var c = allPlans.filter(function (p) {
            //    return p.id == id
            //})[0]
            //console.log(c);

            var selected = allPlans.find(function (p) {
                return p.id === id;
            });

            selectedPlans[selectorId] = {
                code: selected.title.code,
                id: id
            }

            uniqueCodes = Object.values(selectedPlans).map(function (p) {
                return p.code;
            }).filter(function (value, index, self) {
                return self.indexOf(value) === index;
            })

            clearButton.classList.remove('invis');
            filterSource();
            renderFinType(selectorId.split('-')[1], selected.grantSpots);
            renderAddButton();


        }

        function renderAddButton() {


            //console.log(currentSource.length);

            //if (uniqueCodes.length < 3 && !isAvailableSelect && currentSource.length > 0) { //less than 3 unique codes && there is no free select && there are available plans
            if (!isAvailableSelect && currentSource.length > 0) {
                addButton.classList.remove('invis');
            } else {
                addButton.classList.add('invis');
            }
        }

        function createCheckbox(text, id, checked, disabled) {
            //var id = makeId(6);
            var box = document.createElement('div');

            var cb = document.createElement("input");
            cb.classList.add('fin-type-cb');
            cb.setAttribute("type", "checkbox");
            cb.setAttribute("value", id);
            cb.id = id;
            cb.checked = checked;

            if (disabled) cb.setAttribute('disabled', '')

            var label = document.createElement('label');
            label.setAttribute('for', id);
            label.setAttribute('style', 'position: absolute; margin-left: 5px;');
            label.innerHTML = text;

            box.appendChild(cb);
            box.appendChild(label)

            return box;
        }

        function renderFinType(stringId, grantSpots) {
            var ftb = document.getElementById('ftb' + stringId);
            if (grantSpots > 0) {
                var cb = createCheckbox('Бюджет', 'b-' + stringId, true);
                var cb2 = createCheckbox('Контракт', 'c-' + stringId, false);
                ftb.appendChild(cb);
                ftb.appendChild(cb2);
            } else {
                var cb = createCheckbox('Контракт', 'c-' + stringId, true, true);
                ftb.appendChild(cb);
            }
        }

        function makeId(length) {
            var result = '';
            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            var charactersLength = characters.length;
            for (var i = 0; i < length; i++) {
                result += characters.charAt(Math.floor(Math.random() * charactersLength));
            }
            return result;
        }

        function prepareForm() {
            //добавить скрытые чекбоксы для того чтобы отправить их в форме
            var plansField = document.getElementById('plans-field')
            plansField.innerHTML = '';
            var p = Object.values(selectedPlans);
            //var p = Object.keys(selectedPlans).map(function (itm) { return selectedPlans[itm]; });
            for (var i = 0; i < p.length; i++) {
                var item = document.createElement('input');
                item.type = 'checkbox';
                item.name = 'PickedPlans';
                item.value = p[i].id;
                item.checked = true;
                plansField.appendChild(item);
            }


            //заполнить финансирования
            var rawFinTypesInput = document.getElementById('rawFinTypes');
            var checkboxes = document.getElementsByClassName('fin-type-cb');
            for (var i = 0; i < checkboxes.length; i++) {
                if (checkboxes[i].checked) rawFinTypesInput.value += checkboxes[i].id + ';'
            }

            var raw = rawFinTypesInput.value;
            rawFinTypesInput.value = raw.substring(0, raw.length - 1)

        }

    </script>
}

@section Styles{
    <link rel="stylesheet" href="~/css/styled-input.css">
    <link rel="stylesheet" href="~/css/application.css">
    <link rel="stylesheet" href="~/css/buttons.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.0/animate.min.css">

    <style>
        .pointer {
            cursor: pointer;
        }


        .exams-container {
            position: relative;
        }

        .label-center {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
        }

        .column {
            /*border: 1px solid black;*/
            display: inline-block;
            margin: 10px 20px;
            min-width: 220px;
            padding: .3rem 0.7rem;
        }

        .pretty-h4 {
            font-weight: 600;
            margin: 0;
            margin-top: 10px;
        }

        .page {
            height: unset;
        }

        .fin-type-box {
            margin-left: 20px;
        }
    </style>
    <style id="buttons">
        .button-wrap {
            margin-left: 20px;
            margin-top: 5px;
            position: relative;
            height: 40px;
        }

        .clear-button {
            padding: 5px;
            border: none;
            margin: 10px;
            height: 30px;
            font-size: 12px;
            position: absolute;
            top: 17%;
            transform: translateY(-50%);
        }

            .clear-button:focus {
                outline: none
            }

        .plus-button {
            border: 2px solid lightgrey;
            background-color: #fff;
            font-size: 16px;
            height: 2.5em;
            width: 2.5em;
            border-radius: 999px;
            position: relative;
            cursor: pointer;
        }

            .plus-button:after, .plus-button:before {
                content: "";
                display: block;
                background-color: grey;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
            }

            .plus-button:before {
                height: 1em;
                width: 0.2em;
            }

            .plus-button:after {
                height: 0.2em;
                width: 1em;
            }

        .plus-button--small {
            font-size: 12px;
        }

        .plus-button--large {
            font-size: 22px;
        }

        .plus-button:focus {
            outline: none;
        }
    </style>
    <style id="custom-select">
        select {
            margin: 10px 20px;
            max-width: 900px;
            padding: 8px 20px 8px 10px;
            font-size: 12px;
            border: 1px solid #ccc;
            height: 34px;
            -webkit-appearance: none;
            -moz-appearance: none;
            border-radius: 4px;
            font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
        }

            select:focus {
                outline: none;
            }

        .smooth-appearing {
            transition: opacity 0.5s ease-out;
        }

        .invis-select {
            opacity: 0;
        }

        .selected {
            background: transparent;
            color: black;
        }
    </style>
    <style id="application">
        @@media all and (max-width: 375px) {
            select {
                font-size: 9px;
            }

            .styled-input {
                padding: 0;
                padding-left: 10px;
            }
        }
    </style>
}
